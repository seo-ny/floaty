name: Release

on:
  push:
    tags:
      - "v[0-9]+.[0-9]+.[0-9]+"

jobs:
  release:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Check if version is already published
        id: check_version
        run: |
          VERSION=$(node -p "require('./packages/floaty-core/package.json').version")
          echo "Current version: $VERSION"
          if npm view @seo-ny/floaty-core@$VERSION > /dev/null 2>&1; then
            echo "Version $VERSION already exists on npm"
            echo "skip=true" >> $GITHUB_OUTPUT
          else
            echo "skip=false" >> $GITHUB_OUTPUT
          fi

      - name: Stop early if already published
        if: steps.check_version.outputs.skip == 'true'
        run: echo "Version already published. Skipping workflow." && exit 0

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 9

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          registry-url: "https://registry.npmjs.org/"

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build floaty-core
        run: pnpm --filter @seo-ny/floaty-core build:once

      - name: Get release notes
        id: get_release_notes
        run: |
          VERSION=$(node -p "require('./packages/floaty-core/package.json').version")
          CORE_CHANGELOG="packages/floaty-core/CHANGELOG.md"

          if [ -f "$CORE_CHANGELOG" ]; then
            # 현재 버전 시작 위치 찾기
            START_LINE=$(grep -n "^## ${VERSION}" "$CORE_CHANGELOG" | head -1 | cut -d ':' -f 1)
            
            if [ -n "$START_LINE" ]; then
              # 다음 버전 시작 위치 찾기 (정규식으로 ## 다음에 숫자가 오는 패턴 검색)
              NEXT_VERSION_LINE=$(tail -n +$((START_LINE + 1)) "$CORE_CHANGELOG" | grep -n "^## [0-9]" | head -1 | cut -d ':' -f 1)
              
              if [ -n "$NEXT_VERSION_LINE" ]; then
                # 다음 버전 헤더가 있는 경우
                END_LINE=$((START_LINE + NEXT_VERSION_LINE - 1))
                NOTES=$(sed -n "$((START_LINE + 1)),$((END_LINE - 1))p" "$CORE_CHANGELOG")
              else
                # 다음 버전 헤더가 없는 경우 (파일 끝까지)
                NOTES=$(tail -n +$((START_LINE + 1)) "$CORE_CHANGELOG")
              fi
            else
              NOTES="Production release - version ${VERSION}"
            fi
          else
            NOTES="Production release - version ${VERSION}"
          fi

          # GitHub Actions 출력 변수에 저장 (멀티라인 처리)
          echo 'NOTES<<EOF' >> $GITHUB_OUTPUT
          echo "$NOTES" >> $GITHUB_OUTPUT
          echo 'EOF' >> $GITHUB_OUTPUT

      - name: Create release on GitHub
        uses: actions/github-script@v7
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          script: |
            const { owner, repo } = context.repo;
            const tag = context.ref.replace('refs/tags/', '');

            github.rest.repos.createRelease({
              owner,
              repo,
              tag_name: tag,
              name: tag,
              body: `${{ steps.get_release_notes.outputs.NOTES }}`,
              prerelease: false
            });

      - name: Publish floaty-core to npm
        run: pnpm ci:publish
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NPM_CONFIG_PROVENANCE: true
