name: Release (Prerelease - Dev Merge)

permissions:
  contents: write
  pull-requests: write

on:
  pull_request:
    types:
      - closed
    branches:
      - dev

jobs:
  release:
    runs-on: ubuntu-latest
    if: github.event.pull_request.merged == true
    outputs:
      published: ${{ steps.publish.outputs.published }}

    steps:
      - uses: ./.github/actions/setup-context
        id: setup-context

      # 6. (현재 PR이 릴리즈 PR이 아니면) 새로운 브랜치 생성
      - name: Create prerelease branch if not release PR
        if: steps.setup-context.outputs.is_release_pr == 'false'
        id: branch
        run: |
          TIMESTAMP=$(date +%Y%m%d-%H%M%S)
          NEW_BRANCH_NAME=prerelease/next-$TIMESTAMP
          git checkout -b $NEW_BRANCH_NAME
          echo "branch=$NEW_BRANCH_NAME" >> $GITHUB_OUTPUT

      # 7. (〃) pre-release 설정
      - name: Setup pre-release
        if: steps.setup-context.outputs.is_release_pr == 'false'
        run: |
          if [ ! -f .changeset/pre.json ]; then
            echo "----- [ 프리릴리즈 모드 설정 ] -----"
            pnpm changeset pre enter next
          fi

      # 8. (〃) 버전 업데이트 및 출력
      - name: Run changeset version and get updated version
        if: steps.setup-context.outputs.is_release_pr == 'false'
        id: version
        env:
          GITHUB_TOKEN: ${{ secrets.PERSONAL_GITHUB_TOKEN }}
        run: |
          echo "----- [ 프리릴리즈 버전 업데이트 ] -----"
          pnpm ci:version:next
          VERSION=$(node -p "require('./packages/floaty-core/package.json').version")
          echo "version=$VERSION" >> $GITHUB_OUTPUT

          echo
          echo "----- [ 바뀐 버전 확인 ] -----"
          echo "$VERSION"
          echo "----- [ .changeset 디렉터리 내용 ] -----"
          ls -la .changeset/
          echo "----- [ pre.json 파일 내용 ] -----"
          cat .changeset/pre.json
          echo

      # 9. (〃) 새로운 브랜치 푸시
      - name: Push prerelease branch
        if: steps.setup-context.outputs.is_release_pr == 'false'
        env:
          GITHUB_TOKEN: ${{ secrets.PERSONAL_GITHUB_TOKEN }}
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git add .
          git commit -m "chore: prerelease 버전 업데이트"
          git push origin ${{ steps.branch.outputs.branch }}

      # 10. (〃) 프리릴리즈 버전 PR 생성
      - name: Create PR to dev
        if: steps.setup-context.outputs.is_release_pr == 'false'
        env:
          GITHUB_TOKEN: ${{ secrets.PERSONAL_GITHUB_TOKEN }}
        run: |
          # GitHub CLI 설치
          type -p curl >/dev/null || (sudo apt update && sudo apt install curl -y)
          curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | sudo dd of=/usr/share/keyrings/githubcli-archive-keyring.gpg \
          && sudo chmod go+r /usr/share/keyrings/githubcli-archive-keyring.gpg \
          && echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | sudo tee /etc/apt/sources.list.d/github-cli.list > /dev/null \
          && sudo apt update \
          && sudo apt install gh -y

          echo
          echo "----- [ PR 생성 전 확인 ] -----"
          echo "----- [ 현재 브랜치 ] -----"
          echo "$(git branch --show-current)"
          echo "----- [ 현재 브랜치의 변경사항 확인 (원격 dev 브랜치와 비교) ] -----"
          git diff origin/dev..origin/${{ steps.branch.outputs.branch }} --name-status
          echo

          echo "----- [ PR 생성 ] -----"
          gh pr create \
            --base dev \
            --head ${{ steps.branch.outputs.branch }} \
            --title "Prerelease 버전 업데이트 (${{ steps.version.outputs.version }})" \
            --body "# ${{ steps.version.outputs.version }}

              ## 변경사항

              - 버전 업데이트: ${{ steps.version.outputs.version }}
              - CHANGELOG 업데이트
              - changeset 파일 정리"

          echo
          echo "----- [ PR 생성 후 확인 ] -----"
          gh pr list --head ${{ steps.branch.outputs.branch }} --json number,title,state

      # 11. (현재 PR이 릴리즈 PR이면) npm 배포 및 배포 여부 확인
      - name: Publish if release PR
        if: steps.setup-context.outputs.is_release_pr == 'true'
        id: publish
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
        run: |
          if pnpm ci:publish:next; then
            echo "published=true" >> $GITHUB_OUTPUT
            echo "✅ npm 배포 성공"
          else
            echo "published=false" >> $GITHUB_OUTPUT
            echo "❌ npm 배포 실패"
            exit 1
          fi

  post-release:
    needs: release
    if: needs.release.outputs.published == 'true'
    runs-on: ubuntu-latest

    steps:
      # 1. 레포지토리 체크아웃
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # 2. Node.js 설정
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      # 3. CHANGELOG에서 릴리즈 노트 추출
      - name: Read CHANGELOG for Release Notes
        id: changelog
        run: |
          VERSION=$(node -p "require('./packages/floaty-core/package.json').version")
          NOTES=$(awk -v ver="## ${VERSION}" '
            $0 ~ ver {capture=1; next}
            capture && /^## [0-9]+\.[0-9]+\.[0-9]+(-[a-zA-Z0-9]+\.[0-9]+)?/ {exit}
            capture {print}
          ' packages/floaty-core/CHANGELOG.md)
          echo 'NOTES<<EOF' >> $GITHUB_OUTPUT
          echo "$NOTES" >> $GITHUB_OUTPUT
          echo 'EOF' >> $GITHUB_OUTPUT

      # 4. Github 릴리즈
      - name: Create GitHub Release
        uses: actions/github-script@v7
        env:
          RELEASE_VERSION: ${{ steps.changelog.outputs.VERSION }}
          RELEASE_NOTES: ${{ steps.changelog.outputs.NOTES }}
        with:
          github-token: ${{ secrets.PERSONAL_GITHUB_TOKEN }}
          script: |
            const { owner, repo } = context.repo;
            const version = process.env.RELEASE_VERSION;
            const tag = `v${version}`;
            const name = `@seo-ny/floaty-core@${version}`;
            const body = process.env.RELEASE_NOTES;
            github.rest.repos.createRelease({
              owner,
              repo,
              tag_name: tag,
              name,
              body,
              prerelease: true
            });
