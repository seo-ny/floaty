name: Release (release:next - Dev Merge)

on:
  pull_request:
    types:
      - closed
    branches:
      - dev

jobs:
  release:
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest

    steps:
      # 1. 레포지토리 체크아웃
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # 2. pnpm 설치
      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 9
          run_install: false

      # 3. Node.js 설정
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "pnpm"

      # 3-1. pnpm 캐시 경로 출력
      - name: Get pnpm store directory
        id: pnpm-cache
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path)" >> $GITHUB_OUTPUT

      # 3-2. pnpm 캐시 설정
      - name: Setup pnpm cache
        uses: actions/cache@v3
        with:
          path: ${{ steps.pnpm-cache.outputs.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      # 4. 의존성 설치
      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      # 5. 버전 업데이트 PR 생성 또는 npm 레지스트리 배포
      - name: Create release pull request or publish
        uses: changesets/action@v1
        with:
          publish: |
            if pnpm ci:publish:next; then
              echo "published=true" > .published
            fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      # 5-1. npm 레지스트리 배포 여부 확인
      - name: Check if published
        id: check-published
        run: |
          if [ -f .published ]; then
            echo "PUBLISHED=true" >> $GITHUB_OUTPUT
          else
            echo "PUBLISHED=false" >> $GITHUB_OUTPUT
          fi

      # 5-2. CHANGELOG 추출
      - name: Read CHANGELOG for Release Notes
        if: steps.check-published.outputs.PUBLISHED == 'true'
        id: changelog
        run: |
          VERSION=$(node -p "require('./packages/floaty-core/package.json').version")
          NOTES=$(awk -v ver="## ${VERSION}" '
            $0 ~ ver {capture=1; next}
            capture && /^## / {exit}
            capture {print}
          ' packages/floaty-core/CHANGELOG.md)
          echo "VERSION=${VERSION}" >> $GITHUB_OUTPUT
          echo 'NOTES<<EOF' >> $GITHUB_OUTPUT
          echo "$NOTES" >> $GITHUB_OUTPUT
          echo 'EOF' >> $GITHUB_OUTPUT

      # 6. Github 릴리즈
      - name: Create GitHub Release
        uses: actions/github-script@v7
        env:
          RELEASE_TAG: v${{ steps.changelog.outputs.VERSION }}
          RELEASE_NOTES: ${{ steps.changelog.outputs.NOTES }}
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { owner, repo } = context.repo;
            const tag = process.env.RELEASE_TAG;
            const name = `floaty-core ${tag}`;
            const body = process.env.RELEASE_NOTES;
            github.rest.repos.createRelease({
              owner,
              repo,
              tag_name: tag,
              name,
              body,
              prerelease: false
            });
