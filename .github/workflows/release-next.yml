name: Release (release:next - Dev Merge)

permissions:
  contents: write
  pull-requests: write

on:
  pull_request:
    types:
      - closed
    branches:
      - dev

jobs:
  check-labels:
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest
    outputs:
      has_release_label: ${{ steps.check-pr-labels.outputs.has_release_label }}

    steps:
      # 1. 레포지토리 체크아웃
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # 2. PR 라벨 확인
      - name: Check PR labels
        id: check-pr-labels
        run: |
          # PR 라벨 목록 가져오기
          LABELS=$(echo '${{ toJSON(github.event.pull_request.labels.*.name) }}' | jq -r '.[]')

          # 릴리즈 라벨 확인
          for label in $LABELS; do
            if [[ "$label" =~ ^release:next:(patch|minor|major)$ ]]; then
              echo "has_release_label=true" >> $GITHUB_OUTPUT
              exit 0
            fi
          done
          echo "has_release_label=false" >> $GITHUB_OUTPUT

  release:
    needs: check-labels
    if: needs.check-labels.outputs.has_release_label == 'true'
    runs-on: ubuntu-latest
    outputs:
      published: ${{ steps.check-published.outputs.published }}

    steps:
      # 1. 레포지토리 체크아웃
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # 2. pnpm 설치
      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 9
          run_install: false

      # 3. Node.js 설정
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "pnpm"
          registry-url: "https://registry.npmjs.org"
          scope: "@seo-ny"

      # 3-1. pnpm 캐시 경로 출력
      - name: Get pnpm store directory
        id: pnpm-cache
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path)" >> $GITHUB_OUTPUT

      # 3-2. pnpm 캐시 설정
      - name: Setup pnpm cache
        uses: actions/cache@v3
        with:
          path: ${{ steps.pnpm-cache.outputs.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      # 4. 의존성 설치
      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      # 5. changeset baseBranch를 dev 브랜치로 설정
      - name: Set baseBranch to dev
        run: |
          jq '.baseBranch = "dev"' .changeset/config.json > tmp.json && mv tmp.json .changeset/config.json

      # 6. 버전 업데이트 PR 생성 또는 npm 레지스트리 배포
      - name: Create release pull request or publish
        id: changesets
        uses: changesets/action@v1.4.5
        with:
          version: pnpm ci:version:next
          publish: pnpm ci:publish:next
        env:
          GITHUB_TOKEN: ${{ secrets.PERSONAL_GITHUB_TOKEN }}
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      # 7. npm 레지스트리 배포 여부 확인
      - name: Check if published
        id: check-published
        run: |
          echo "published=${{ steps.changesets.outputs.published }}" >> $GITHUB_OUTPUT

  post-release:
    needs: release
    if: needs.release.outputs.published == 'true'
    runs-on: ubuntu-latest

    steps:
      # 1. CHANGELOG 추출
      - name: Read CHANGELOG for Release Notes
        id: changelog
        run: |
          VERSION=$(node -p "require('./packages/floaty-core/package.json').version")
          NOTES=$(awk -v ver="## ${VERSION}" '
            $0 ~ ver {capture=1; next}
            capture && /^## [0-9]+\.[0-9]+\.[0-9]+(-[a-zA-Z0-9]+\.[0-9]+)?/ {exit}
            capture {print}
          ' packages/floaty-core/CHANGELOG.md)
          echo "VERSION=${VERSION}" >> $GITHUB_OUTPUT
          echo 'NOTES<<EOF' >> $GITHUB_OUTPUT
          echo "$NOTES" >> $GITHUB_OUTPUT
          echo 'EOF' >> $GITHUB_OUTPUT

      # 2. Github 릴리즈
      - name: Create GitHub Release
        uses: actions/github-script@v7
        env:
          RELEASE_TAG: v${{ steps.changelog.outputs.VERSION }}
          RELEASE_NOTES: ${{ steps.changelog.outputs.NOTES }}
        with:
          github-token: ${{ secrets.PERSONAL_GITHUB_TOKEN }}
          script: |
            const { owner, repo } = context.repo;
            const tag = process.env.RELEASE_TAG;
            const name = `floaty-core ${tag}`;
            const body = process.env.RELEASE_NOTES;
            github.rest.repos.createRelease({
              owner,
              repo,
              tag_name: tag,
              name,
              body,
              prerelease: false
            });
