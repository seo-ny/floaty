name: Release (release:next - Dev Merge)

permissions:
  contents: write
  pull-requests: write

on:
  pull_request:
    types:
      - closed
    branches:
      - dev

jobs:
  check-labels:
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest
    outputs:
      has_release_label: ${{ steps.check-pr-labels.outputs.has_release_label }}

    steps:
      # 1. 레포지토리 체크아웃
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # 2. PR 라벨 확인
      - name: Check PR labels
        id: check-pr-labels
        run: |
          # PR 라벨 목록 가져오기
          LABELS=$(echo '${{ toJSON(github.event.pull_request.labels.*.name) }}' | jq -r '.[]')

          # 릴리즈 라벨 확인
          for label in $LABELS; do
            if [[ "$label" =~ ^release:next:(patch|minor|major)$ ]]; then
              echo "has_release_label=true" >> $GITHUB_OUTPUT
              exit 0
            fi
          done
          echo "has_release_label=false" >> $GITHUB_OUTPUT

  release:
    needs: check-labels
    if: needs.check-labels.outputs.has_release_label == 'true'
    runs-on: ubuntu-latest
    outputs:
      published: ${{ steps.set-published.outputs.published }}

    steps:
      # 1. 레포지토리 체크아웃
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # 2. pnpm 설치
      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 9
          run_install: false

      # 3. Node.js 설정
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "pnpm"
          registry-url: "https://registry.npmjs.org"
          scope: "@seo-ny"

      # 3-1. pnpm 캐시 경로 출력
      - name: Get pnpm store directory
        id: pnpm-cache
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path)" >> $GITHUB_OUTPUT

      # 3-2. pnpm 캐시 설정
      - name: Setup pnpm cache
        uses: actions/cache@v3
        with:
          path: ${{ steps.pnpm-cache.outputs.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      # 4. 의존성 설치
      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      # 5. 프리릴리즈 모드 진입
      - name: Ensure pre.json exists
        run: |
          if [ ! -f .changeset/pre.json ]; then
            pnpm ci:pre:enter
          fi

      # 6. .changeset/.md 파일 존재 여부 확인
      - name: Check if changesets exist
        id: check_changesets
        run: |
          if ls .changeset/*.md 1> /dev/null 2>&1; then
            echo "found=true" >> $GITHUB_OUTPUT
          else
            echo "found=false" >> $GITHUB_OUTPUT
          fi

      # 7. (.changeset/.md 파일이 존재하면) 버전 업데이트
      - name: Run changeset version
        if: steps.check_changesets.outputs.found == 'true'
        env:
          GITHUB_TOKEN: ${{ secrets.PERSONAL_GITHUB_TOKEN }}
        run: pnpm ci:version:next

      # 7-1. (〃) 버전 출력
      - name: Get updated version from package.json
        if: steps.check_changesets.outputs.found == 'true'
        id: version
        run: |
          VERSION=$(node -p "require('./packages/floaty-core/package.json').version")
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      # 8. (〃) 새로운 브랜치 생성
      - name: Create prerelease branch
        if: steps.check_changesets.outputs.found == 'true'
        id: branch
        run: |
          BRANCH_NAME=prerelease/next-${{ steps.version.outputs.version }}
          git checkout -b $BRANCH_NAME
          echo "branch=$BRANCH_NAME" >> $GITHUB_OUTPUT

      # 9. (〃) 새로운 브랜치 푸시
      - name: Push prerelease branch
        if: steps.check_changesets.outputs.found == 'true'
        env:
          GITHUB_TOKEN: ${{ secrets.PERSONAL_GITHUB_TOKEN }}
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git add .
          git commit -m "chore: prerelease 버전 업데이트"
          git push origin ${{ steps.branch.outputs.branch }}

      # 10. (〃) 프리릴리즈 버전 PR 생성
      - name: Create PR to dev
        if: steps.check_changesets.outputs.found == 'true'
        uses: peter-evans/create-pull-request@v5
        with:
          token: ${{ secrets.PERSONAL_GITHUB_TOKEN }}
          base: dev
          branch: ${{ steps.branch.outputs.branch }}
          title: "chore: prerelease 버전 업데이트 (${{ steps.version.outputs.version }})"
          body: |
            ## ${{ steps.version.outputs.version }}
            Changeset에 따라 버전 업데이트 및 CHANGELOG 수정

      # 11. (.changeset/.md 파일이 존재하지 않으면) npm 레지스트리 배포
      - name: Publish if no .changeset/*.md
        if: steps.check_changesets.outputs.found == 'false'
        run: |
          OUTPUT=$(pnpm ci:publish:next)
          echo "$OUTPUT" | tee publish-output.txt

      # 12. npm 레지스트리 배포 여부 확인
      - name: Set output if published
        id: set-published
        run: |
          if [ -f publish-output.txt ] && grep -q "Successfully published:" publish-output.txt; then
            echo "published=true" >> $GITHUB_OUTPUT
          else
            echo "published=false" >> $GITHUB_OUTPUT
          fi

  post-release:
    needs: release
    if: needs.release.outputs.published == 'true'
    runs-on: ubuntu-latest

    steps:
      # 1. 레포지토리 체크아웃
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # 2. Node.js 설정
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      # 3. CHANGELOG 추출
      - name: Read CHANGELOG for Release Notes
        id: changelog
        run: |
          VERSION=$(node -p "require('./packages/floaty-core/package.json').version")
          NOTES=$(awk -v ver="## ${VERSION}" '
            $0 ~ ver {capture=1; next}
            capture && /^## [0-9]+\.[0-9]+\.[0-9]+(-[a-zA-Z0-9]+\.[0-9]+)?/ {exit}
            capture {print}
          ' packages/floaty-core/CHANGELOG.md)
          echo "VERSION=${VERSION}" >> $GITHUB_OUTPUT
          echo 'NOTES<<EOF' >> $GITHUB_OUTPUT
          echo "$NOTES" >> $GITHUB_OUTPUT
          echo 'EOF' >> $GITHUB_OUTPUT

      # 4. Github 릴리즈
      - name: Create GitHub Release
        uses: actions/github-script@v7
        env:
          RELEASE_TAG: v${{ steps.changelog.outputs.VERSION }}
          RELEASE_NOTES: ${{ steps.changelog.outputs.NOTES }}
        with:
          github-token: ${{ secrets.PERSONAL_GITHUB_TOKEN }}
          script: |
            const { owner, repo } = context.repo;
            const tag = process.env.RELEASE_TAG;
            const name = `floaty-core ${tag}`;
            const body = process.env.RELEASE_NOTES;
            github.rest.repos.createRelease({
              owner,
              repo,
              tag_name: tag,
              name,
              body,
              prerelease: true
            });
